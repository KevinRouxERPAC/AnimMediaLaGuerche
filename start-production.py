#!/usr/bin/env python3
"""
Script de d√©marrage pour Anim'M√©dia en production
G√®re l'installation des d√©pendances et le d√©marrage s√©curis√©
"""

import os
import sys
import subprocess
import secrets
from pathlib import Path

def print_banner():
    print("""
üé® ========================================
   ANIM'M√âDIA - D√âMARRAGE PRODUCTION
   Application Web S√©curis√©e
========================================
    """)

def check_python_version():
    """V√©rifier la version de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis. Version actuelle:", sys.version)
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")

def install_dependencies():
    """Installer les d√©pendances"""
    print("\nüì¶ Installation des d√©pendances...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True, capture_output=True)
        print("‚úÖ D√©pendances install√©es avec succ√®s")
    except subprocess.CalledProcessError as e:
        print("‚ùå Erreur lors de l'installation des d√©pendances:")
        print(e.stderr.decode())
        sys.exit(1)

def setup_environment():
    """Configuration de l'environnement"""
    env_file = Path(".env")
    
    if not env_file.exists():
        print("\nüîß Cr√©ation du fichier .env...")
        
        # G√©n√©rer des cl√©s s√©curis√©es
        secret_key = secrets.token_hex(32)
        jwt_secret = secrets.token_hex(32)
        
        env_content = f"""# Configuration Anim'M√©dia - G√©n√©ration automatique
# Date: {datetime.now().isoformat()}

# S√âCURIT√â - Cl√©s g√©n√©r√©es automatiquement
SECRET_KEY={secret_key}
JWT_SECRET_KEY={jwt_secret}

# CONFIGURATION SERVEUR
FLASK_ENV=production
FLASK_DEBUG=False
HOST=0.0.0.0
PORT=8000

# ADMIN - CHANGEZ LE MOT DE PASSE !
ADMIN_USERNAME=admin
ADMIN_PASSWORD=animmedia2024

# S√âCURIT√â AVANC√âE
SESSION_COOKIE_SECURE=True
SESSION_COOKIE_HTTPONLY=True
JWT_ACCESS_TOKEN_EXPIRES=3600
JWT_REFRESH_TOKEN_EXPIRES=2592000

# LOGS
LOG_LEVEL=INFO
"""
        
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print("‚úÖ Fichier .env cr√©√© avec des cl√©s s√©curis√©es")
        print("‚ö†Ô∏è  IMPORTANT: Changez le mot de passe admin dans .env")
    else:
        print("‚úÖ Fichier .env existant d√©tect√©")

def create_directories():
    """Cr√©er les dossiers n√©cessaires"""
    directories = ["data", "logs", "backups"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    print("‚úÖ Dossiers syst√®me cr√©√©s")

def check_data_files():
    """V√©rifier et initialiser les fichiers de donn√©es"""
    data_dir = Path("data")
    
    # Fichier events.json
    events_file = data_dir / "events.json"
    if not events_file.exists():
        events_data = {"events": []}
        with open(events_file, 'w', encoding='utf-8') as f:
            import json
            json.dump(events_data, f, ensure_ascii=False, indent=2)
        print("‚úÖ Fichier events.json initialis√©")
    
    # Fichier members.json  
    members_file = data_dir / "members.json"
    if not members_file.exists():
        members_data = {"members": []}
        with open(members_file, 'w', encoding='utf-8') as f:
            import json
            json.dump(members_data, f, ensure_ascii=False, indent=2)
        print("‚úÖ Fichier members.json initialis√©")
    
    # Fichier registrations.json
    registrations_file = data_dir / "registrations.json"
    if not registrations_file.exists():
        registrations_data = {"registrations": []}
        with open(registrations_file, 'w', encoding='utf-8') as f:
            import json
            json.dump(registrations_data, f, ensure_ascii=False, indent=2)
        print("‚úÖ Fichier registrations.json initialis√©")

def start_application():
    """D√©marrer l'application"""
    print("\nüöÄ D√©marrage de l'application...")
    print("üåê Application disponible sur: http://localhost:8000")
    print("üîê Interface admin sur: http://localhost:8000/admin/")
    print("üìä API documentation: http://localhost:8000/api/")
    print("\nüí° Appuyez sur Ctrl+C pour arr√™ter")
    
    try:
        # Essayer d'utiliser Gunicorn pour la production
        subprocess.run([
            "gunicorn", 
            "--bind", "0.0.0.0:8000",
            "--workers", "4",
            "--timeout", "120",
            "--access-logfile", "logs/access.log",
            "--error-logfile", "logs/error.log",
            "app:app"
        ])
    except FileNotFoundError:
        # Fallback vers le serveur Flask int√©gr√©
        print("‚ÑπÔ∏è  Gunicorn non disponible, utilisation du serveur Flask")
        os.system("python app.py")

def main():
    """Fonction principale"""
    try:
        print_banner()
        check_python_version()
        install_dependencies()
        setup_environment()
        create_directories()
        check_data_files()
        start_application()
        
    except KeyboardInterrupt:
        print("\n\nüëã Arr√™t de l'application demand√©")
        print("‚úÖ Application arr√™t√©e proprement")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)

if __name__ == "__main__":
    from datetime import datetime
    main()